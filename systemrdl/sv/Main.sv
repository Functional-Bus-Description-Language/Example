// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module Main (
        input wire clk,
        input wire rst,

        apb3_intf.slave s_apb,

        input Main_pkg::Main__in_t hwif_in,
        output Main_pkg::Main__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [6:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk) begin
        if(rst) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb.PSEL) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb.PWRITE;
                    cpuif_addr <= {s_apb.PADDR[6:2], 2'b0};
                    cpuif_wr_data <= s_apb.PWDATA;
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end
    assign cpuif_wr_biten = '1;

    // Response
    assign s_apb.PREADY = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb.PRDATA = cpuif_rd_data;
    assign s_apb.PSLVERR = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic C;
        logic S;
        logic CA[10];
        logic SA[10];
        logic Counter0;
        logic Counter1;
        logic Mask;
        logic Version;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.C = cpuif_req_masked & (cpuif_addr == 7'h0);
        decoded_reg_strb.S = cpuif_req_masked & (cpuif_addr == 7'h4);
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.CA[i0] = cpuif_req_masked & (cpuif_addr == 7'h8 + i0*7'h4);
        end
        for(int i0=0; i0<10; i0++) begin
            decoded_reg_strb.SA[i0] = cpuif_req_masked & (cpuif_addr == 7'h30 + i0*7'h4);
        end
        decoded_reg_strb.Counter0 = cpuif_req_masked & (cpuif_addr == 7'h58);
        decoded_reg_strb.Counter1 = cpuif_req_masked & (cpuif_addr == 7'h5c);
        decoded_reg_strb.Mask = cpuif_req_masked & (cpuif_addr == 7'h60);
        decoded_reg_strb.Version = cpuif_req_masked & (cpuif_addr == 7'h64);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [6:0] next;
                logic load_next;
            } C1;
            struct {
                logic [8:0] next;
                logic load_next;
            } C2;
            struct {
                logic [11:0] next;
                logic load_next;
            } C3;
        } C;
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } C;
        } CA[10];
        struct {
            struct {
                logic [15:0] next;
                logic load_next;
            } Mask;
        } Mask;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [6:0] value;
            } C1;
            struct {
                logic [8:0] value;
            } C2;
            struct {
                logic [11:0] value;
            } C3;
        } C;
        struct {
            struct {
                logic [7:0] value;
            } C;
        } CA[10];
        struct {
            struct {
                logic [15:0] value;
            } Mask;
        } Mask;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: Main.C.C1
    always_comb begin
        automatic logic [6:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.C.C1.value;
        load_next_c = '0;
        if(decoded_reg_strb.C && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.C.C1.value & ~decoded_wr_biten[6:0]) | (decoded_wr_data[6:0] & decoded_wr_biten[6:0]);
            load_next_c = '1;
        end
        field_combo.C.C1.next = next_c;
        field_combo.C.C1.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.C.C1.load_next) begin
            field_storage.C.C1.value <= field_combo.C.C1.next;
        end
    end
    assign hwif_out.C.C1.value = field_storage.C.C1.value;
    // Field: Main.C.C2
    always_comb begin
        automatic logic [8:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.C.C2.value;
        load_next_c = '0;
        if(decoded_reg_strb.C && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.C.C2.value & ~decoded_wr_biten[15:7]) | (decoded_wr_data[15:7] & decoded_wr_biten[15:7]);
            load_next_c = '1;
        end
        field_combo.C.C2.next = next_c;
        field_combo.C.C2.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.C.C2.load_next) begin
            field_storage.C.C2.value <= field_combo.C.C2.next;
        end
    end
    assign hwif_out.C.C2.value = field_storage.C.C2.value;
    // Field: Main.C.C3
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.C.C3.value;
        load_next_c = '0;
        if(decoded_reg_strb.C && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.C.C3.value & ~decoded_wr_biten[27:16]) | (decoded_wr_data[27:16] & decoded_wr_biten[27:16]);
            load_next_c = '1;
        end
        field_combo.C.C3.next = next_c;
        field_combo.C.C3.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.C.C3.load_next) begin
            field_storage.C.C3.value <= field_combo.C.C3.next;
        end
    end
    assign hwif_out.C.C3.value = field_storage.C.C3.value;
    for(genvar i0=0; i0<10; i0++) begin
        // Field: Main.CA[].C
        always_comb begin
            automatic logic [7:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.CA[i0].C.value;
            load_next_c = '0;
            if(decoded_reg_strb.CA[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.CA[i0].C.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
                load_next_c = '1;
            end
            field_combo.CA[i0].C.next = next_c;
            field_combo.CA[i0].C.load_next = load_next_c;
        end

        always_ff @(posedge clk) begin
            if(field_combo.CA[i0].C.load_next) begin
                field_storage.CA[i0].C.value <= field_combo.CA[i0].C.next;
            end
        end
        assign hwif_out.CA[i0].C.value = field_storage.CA[i0].C.value;
    end
    // Field: Main.Mask.Mask
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.Mask.Mask.value;
        load_next_c = '0;
        if(decoded_reg_strb.Mask && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.Mask.Mask.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.Mask.Mask.next = next_c;
        field_combo.Mask.Mask.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.Mask.Mask.load_next) begin
            field_storage.Mask.Mask.value <= field_combo.Mask.Mask.next;
        end
    end
    assign hwif_out.Mask.Mask.value = field_storage.Mask.Mask.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[26];
    assign readback_array[0][6:0] = (decoded_reg_strb.C && !decoded_req_is_wr) ? field_storage.C.C1.value : '0;
    assign readback_array[0][15:7] = (decoded_reg_strb.C && !decoded_req_is_wr) ? field_storage.C.C2.value : '0;
    assign readback_array[0][27:16] = (decoded_reg_strb.C && !decoded_req_is_wr) ? field_storage.C.C3.value : '0;
    assign readback_array[0][31:28] = '0;
    assign readback_array[1][6:0] = (decoded_reg_strb.S && !decoded_req_is_wr) ? hwif_in.S.S1.next : '0;
    assign readback_array[1][15:7] = (decoded_reg_strb.S && !decoded_req_is_wr) ? hwif_in.S.S2.next : '0;
    assign readback_array[1][27:16] = (decoded_reg_strb.S && !decoded_req_is_wr) ? hwif_in.S.S3.next : '0;
    assign readback_array[1][31:28] = '0;
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 2][7:0] = (decoded_reg_strb.CA[i0] && !decoded_req_is_wr) ? field_storage.CA[i0].C.value : '0;
        assign readback_array[i0*1 + 2][31:8] = '0;
    end
    for(genvar i0=0; i0<10; i0++) begin
        assign readback_array[i0*1 + 12][7:0] = (decoded_reg_strb.SA[i0] && !decoded_req_is_wr) ? hwif_in.SA[i0].S.next : '0;
        assign readback_array[i0*1 + 12][31:8] = '0;
    end
    assign readback_array[22][31:0] = (decoded_reg_strb.Counter0 && !decoded_req_is_wr) ? hwif_in.Counter0.Value.next : '0;
    assign readback_array[23][0:0] = (decoded_reg_strb.Counter1 && !decoded_req_is_wr) ? hwif_in.Counter1.Value.next : '0;
    assign readback_array[23][31:1] = '0;
    assign readback_array[24][15:0] = (decoded_reg_strb.Mask && !decoded_req_is_wr) ? field_storage.Mask.Mask.value : '0;
    assign readback_array[24][31:16] = '0;
    assign readback_array[25][23:0] = (decoded_reg_strb.Version && !decoded_req_is_wr) ? 24'h10102 : '0;
    assign readback_array[25][31:24] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<26; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
